
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper Functions
    function isAdmin() {
      // Check if the user's UID is in the list of admin UIDs.
      return request.auth.uid in ["2A71uIHMVPXVcp4zSCSoxxir8Bl1"];
    }

    function isOwner(userId) {
      // Check if the requesting user is the owner of the document.
      return request.auth != null && request.auth.uid == userId;
    }

    // Function to validate the structure of an order during creation.
    function isValidOrderData() {
      let incomingData = request.resource.data;
      // Check for COD vs Online payment logic
      let isCod = incomingData.paymentMethod == 'COD';
      let isOnline = incomingData.paymentMethod == 'Online';
      
      // Check that status is appropriate for the payment method
      let isCorrectInitialStatus = (isCod && incomingData.status == 'Placed') || (isOnline && incomingData.status == 'Confirmed');

      return isOwner(incomingData.userId) && // User can only create orders for themselves
             isCorrectInitialStatus &&
             incomingData.productId is string &&
             incomingData.productDetails.brand is string &&
             incomingData.productDetails.model is string &&
             incomingData.productDetails.price is number &&
             incomingData.shippingAddress.line1 is string &&
             incomingData.shippingAddress.city is string &&
             // Ensure pricePaid is correct for payment method
             incomingData.pricePaid == (isOnline ? incomingData.productDetails.price : 0) &&
             // Ensure paymentId exists only for online payments. Use hasAny to check for existence.
             (isOnline ? incomingData.keys().hasAny(['paymentId']) && incomingData.paymentId is string : !incomingData.keys().hasAny(['paymentId']));
    }

    // USER-ACCESSIBLE COLLECTIONS
    match /products/{productId} {
      allow read: if true;
      // Admins can create or delete products
      allow create, delete: if isAdmin();
      // Admins can update anything.
      // A regular user can ONLY update the stock, and ONLY by decrementing it by 1.
      // This is crucial for the checkout transaction.
      allow update: if isAdmin() ||
                       (request.auth != null &&
                        request.resource.data.stock == resource.data.stock - 1 &&
                        request.resource.data.diff(resource.data).affectedKeys().hasOnly(['stock']));
    }

    match /services/{serviceId} {
      allow read: if resource.data.status == 'Active' || isAdmin();
      allow write: if isAdmin();
    }
    
    match /offers/{offerId} {
      allow read: if resource.data.status == 'Active' || isAdmin();
      allow write: if isAdmin();
    }
    
    match /enquiries/{enquiryId} {
      allow create: if true;
      allow read, update, delete: if isAdmin();
    }

    // USER-SPECIFIC DATA
    match /users/{userId} {
      // User can create their own doc on signup.
      // A user can update their own displayName and phone. Admin can update accountStatus.
      allow create: if isOwner(userId);
      allow read: if isOwner(userId) || isAdmin();
      allow update: if (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['displayName', 'phone', 'lastLoginAt'])) ||
                       (isAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['accountStatus']));

      // Subcollections
      match /addresses/{addressId} {
        allow read, write: if isOwner(userId);
      }

      match /appointments/{appointmentId} {
        allow create, read: if isOwner(userId) || isAdmin();
        // User can update payment details, admin can update status.
        allow update: if (isOwner(userId) && request.resource.data.diff(resource.data).affectedKeys().hasAll(['status', 'paymentId', 'pricePaid'])) ||
                         (isAdmin() && request.resource.data.diff(resource.data).affectedKeys().hasOnly(['status']));
        allow delete: if false; // Keep records
      }

      match /orders/{orderId} {
        // Use the helper function to validate order data on creation.
        allow create: if isOwner(userId) && isValidOrderData();
        allow read: if isOwner(userId) || isAdmin();
        // User can cancel their own order if it hasn't shipped. Admin can do more.
        allow update: if (isOwner(userId) && request.resource.data.status == 'Cancelled' && resource.data.status != 'Shipped' && resource.data.status != 'Delivered') || isAdmin();
        allow delete: if isAdmin(); // Only admins can delete orders
      }
    }
    
    // COLLECTION GROUP RULES FOR ADMIN PANEL
    match /{path=**}/appointments/{appointmentId} {
      // Admins can read all appointments from any user for the admin dashboard.
      allow list: if isAdmin();
    }
  }
}
