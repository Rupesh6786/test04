
rules_version = '2';

service cloud.firestore {
  match /databases/{database}/documents {

    // Helper function to check for admin role
    function isAdmin() {
      return request.auth.uid in ["2A71uIHMVPXVcp4zSCSoxxir8Bl1"];
    }

    // Helper function to check if user is authenticated and accessing their own data
    function isOwner(userId) {
      return request.auth != null && request.auth.uid == userId;
    }
    
    // USERS collection
    match /users/{userId} {
      // Admins can read/write any user document. Users can read/write their own document.
      allow read, write: if isAdmin() || isOwner(userId);

      // Subcollections for a user
      match /appointments/{appointmentId} {
        // Users can create their own appointments
        allow create: if isOwner(userId);
        // Users can read their own appointments, Admins can read any appointment
        allow read: if isOwner(userId) || isAdmin();
        // Admins can update any appointment, users can update their own if not completed/cancelled
        allow update: if isAdmin() || (isOwner(userId) && !(resource.data.status in ['Completed', 'Cancelled']));
        // Users can delete their own appointments. Admins can too.
        allow delete: if isOwner(userId) || isAdmin();
      }

      match /addresses/{addressId} {
        // Users can manage their own addresses.
        allow create, update, delete: if isOwner(userId);
        // Admins can read addresses for display in the panel.
        allow read: if isOwner(userId) || isAdmin();
      }

      match /orders/{orderId} {
        // Users can read their own orders, Admins can read any order.
        allow read: if isOwner(userId) || isAdmin();

        // A user can create their own order if the data is valid.
        // This function ensures the order data matches what the app sends.
        function isOrderDataValid() {
          let data = request.resource.data;
          let isCod = data.status == 'Placed' && data.paymentMethod == 'COD' && data.pricePaid == 0;
          let isOnline = data.status == 'Confirmed' && data.paymentMethod == 'Online' && data.pricePaid > 0 && data.paymentId is string;
          
          return data.userId == request.auth.uid &&
                 data.productId is string &&
                 data.productDetails is map && data.productDetails.brand is string &&
                 data.shippingAddress is map && data.shippingAddress.city is string &&
                 (isCod || isOnline) &&
                 data.createdAt == request.time;
        }
        allow create: if isOwner(userId) && isOrderDataValid();

        // Users can cancel their order if it hasn't been delivered/cancelled. Admins can update anything.
        allow update: if isAdmin() || (isOwner(userId) && request.resource.data.status == 'Cancelled' && resource.data.status != 'Delivered');

        // Users shouldn't be able to delete orders to maintain history. Admins can.
        allow delete: if isAdmin();
      }
    }

    // PRODUCTS collection
    match /products/{productId} {
      // Anyone can read products
      allow read: if true;
      // Only admins can create or delete products
      allow create, delete: if isAdmin();
      // Admins can update anything.
      // A regular user can only update the stock, and only by decrementing it by 1.
      allow update: if isAdmin() || 
        (request.auth.uid != null && 
         request.resource.data.stock == resource.data.stock - 1 &&
         // Ensure no other fields are being changed
         request.resource.data.diff(resource.data).affectedKeys().hasOnly(['stock']));
    }

    // SERVICES collection
    match /services/{serviceId} {
        // Anyone can read active services, admins can read all
        allow read: if resource.data.status == 'Active' || isAdmin();
        // Only admins can write
        allow write: if isAdmin();
    }
    
    // OFFERS collection
    match /offers/{offerId} {
        // Anyone can read active offers, admins can read all
        allow read: if resource.data.status == 'Active' || isAdmin();
        // Only admins can write
        allow write: if isAdmin();
    }
    
    // ENQUIRIES collection
    match /enquiries/{enquiryId} {
        // Anyone can submit an enquiry
        allow create: if true;
        // Only admins can read, update, or delete enquiries
        allow read, update, delete: if isAdmin();
    }
  }
}
